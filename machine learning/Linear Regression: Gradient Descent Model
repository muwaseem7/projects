import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Define functions for standardization, cost calculation, gradient computation, and updates
def standardize(x):
    mean = np.mean(x)
    std = np.std(x)
    return (x - mean) / std

def compute_error(m, b, x, y):
    n = len(x)
    predictions = m * x + b
    return (1 / n) * np.sum((y - predictions) ** 2)

def compute_gradients(m, b, x, y):
    n = len(x)
    predictions = m * x + b
    dm = (-2 / n) * np.sum(x * (y - predictions))
    db = (-2 / n) * np.sum(y - predictions)
    return dm, db

def gradient_descent_update(m, b, dm, db, alpha):
    m_new = m - alpha * dm
    b_new = b - alpha * db
    return m_new, b_new

# Initialize parameters
m = -0.5  # Initial slope
b = 0  # Initial intercept
alpha = 0.0001  # Learning rate

# Load dataset
data = pd.read_csv("https://raw.githubusercontent.com/tofighi/MachineLearning/master/datasets/student_marks.csv")
data.columns = data.columns.str.strip()  # Remove any leading/trailing spaces in column names
midterm_marks = data['Midterm mark'].values
final_marks = data['Final mark'].values

# Plot initial data points
plt.figure(figsize=(10, 6))
plt.scatter(midterm_marks, final_marks, color='blue', label='Data Points')
plt.xlabel('Midterm Marks')
plt.ylabel('Final Marks')
plt.title('Student Marks Data')
plt.legend()
plt.grid()
plt.show()

# Plot initial regression line
plt.figure(figsize=(10, 6))
plt.scatter(midterm_marks, final_marks, color='blue', label='Data Points')
plt.plot(midterm_marks, m * midterm_marks + b, color='red', label='Initial Regression Line')
plt.xlabel('Midterm Marks')
plt.ylabel('Final Marks')
plt.title('Initial Regression Line')
plt.legend()
plt.grid()
plt.show()

# Update m and b for 100 iterations
errors_100 = []
for _ in range(100):
    dm, db = compute_gradients(m, b, midterm_marks, final_marks)
    m, b = gradient_descent_update(m, b, dm, db, alpha)
    errors_100.append(compute_error(m, b, midterm_marks, final_marks))

# Plot regression line after 100 iterations
plt.figure(figsize=(10, 6))
plt.scatter(midterm_marks, final_marks, color='blue', label='Data Points')
plt.plot(midterm_marks, m * midterm_marks + b, color='green', label='Regression Line after 100 Iterations')
plt.xlabel('Midterm Marks')
plt.ylabel('Final Marks')
plt.title('Regression Line After 100 Iterations')
plt.legend()
plt.grid()
plt.show()

# Plot error vs iterations for the first 100 iterations
plt.figure(figsize=(10, 6))
plt.plot(range(1, 101), errors_100, color='purple', label='Error')
plt.xlabel('Iteration')
plt.ylabel('Error')
plt.title('Error Over 100 Iterations')
plt.legend()
plt.grid()
plt.show()

# Update m and b for 2000 iterations
m, b = -0.5, 0  # Reset parameters
errors_2000 = []
for _ in range(2000):
    dm, db = compute_gradients(m, b, midterm_marks, final_marks)
    m, b = gradient_descent_update(m, b, dm, db, alpha)
    errors_2000.append(compute_error(m, b, midterm_marks, final_marks))

# Plot regression line after 2000 iterations
plt.figure(figsize=(10, 6))
plt.scatter(midterm_marks, final_marks, color='blue', label='Data Points')
plt.plot(midterm_marks, m * midterm_marks + b, color='orange', label='Regression Line after 2000 Iterations')
plt.xlabel('Midterm Marks')
plt.ylabel('Final Marks')
plt.title('Regression Line After 2000 Iterations')
plt.legend()
plt.grid()
plt.show()

# Plot error vs iterations for 2000 iterations
plt.figure(figsize=(10, 6))
plt.plot(range(1, 2001), errors_2000, color='red', label='Error')
plt.xlabel('Iteration')
plt.ylabel('Error')
plt.title('Error Over 2000 Iterations')
plt.legend()
plt.grid()
plt.show()

# Standardize data
std_midterm_marks = standardize(midterm_marks)
std_final_marks = standardize(final_marks)

# Reset parameters for standardized data
m, b = -0.5, 0

# Plot standardized data
plt.figure(figsize=(10, 6))
plt.scatter(std_midterm_marks, std_final_marks, color='blue', label='Standardized Data Points')
plt.xlabel('Standardized Midterm Marks')
plt.ylabel('Standardized Final Marks')
plt.title('Standardized Data Points')
plt.legend()
plt.grid()
plt.show()

# Reset parameters for standardized data
m, b = -0.5, 0

# Plot standardized data with initial regression line
plt.figure(figsize=(10, 6))
plt.scatter(std_midterm_marks, std_final_marks, color='blue', label='Standardized Data Points')
plt.plot(std_midterm_marks, m * std_midterm_marks + b, color='red', label='Initial Regression Line')
plt.xlabel('Standardized Midterm Marks')
plt.ylabel('Standardized Final Marks')
plt.title('Standardized Dataset and Regression Line')
plt.legend()
plt.grid()
plt.show()

# Update m and b for 100 iterations (standardized data)
std_errors_100 = []
for _ in range(100):
    dm, db = compute_gradients(m, b, std_midterm_marks, std_final_marks)
    m, b = gradient_descent_update(m, b, dm, db, alpha)
    std_errors_100.append(compute_error(m, b, std_midterm_marks, std_final_marks))

# Plot regression line after 100 iterations (standardized data)
plt.figure(figsize=(10, 6))
plt.scatter(std_midterm_marks, std_final_marks, color='blue', label='Standardized Data Points')
plt.plot(std_midterm_marks, m * std_midterm_marks + b, color='green', label='Regression Line after 100 Iterations')
plt.xlabel('Standardized Midterm Marks')
plt.ylabel('Standardized Final Marks')
plt.title('Standardized Regression Line After 100 Iterations')
plt.legend()
plt.grid()
plt.show()

# Plot error vs iterations for 100 iterations (standardized data)
plt.figure(figsize=(10, 6))
plt.plot(range(1, 101), std_errors_100, color='purple', label='Standardized Error')
plt.xlabel('Iteration')
plt.ylabel('Error')
plt.title('Standardized Error Over 100 Iterations')
plt.legend()
plt.grid()
plt.show()

# Update m and b for 2000 iterations (standardized data)
m, b = -0.5, 0
std_errors_2000 = []
for _ in range(2000):
    dm, db = compute_gradients(m, b, std_midterm_marks, std_final_marks)
    m, b = gradient_descent_update(m, b, dm, db, alpha)
    std_errors_2000.append(compute_error(m, b, std_midterm_marks, std_final_marks))

# Plot regression line after 2000 iterations (standardized data)
plt.figure(figsize=(10, 6))
plt.scatter(std_midterm_marks, std_final_marks, color='blue', label='Standardized Data Points')
plt.plot(std_midterm_marks, m * std_midterm_marks + b, color='orange', label='Regression Line after 2000 Iterations')
plt.xlabel('Standardized Midterm Marks')
plt.ylabel('Standardized Final Marks')
plt.title('Standardized Regression Line After 2000 Iterations')
plt.legend()
plt.grid()
plt.show()

# Plot error vs iterations for 2000 iterations (standardized data)
plt.figure(figsize=(10, 6))
plt.plot(range(1, 2001), std_errors_2000, color='red', label='Standardized Error')
plt.xlabel('Iteration')
plt.ylabel('Error')
plt.title('Standardized Error Over 2000 Iterations')
plt.legend()
plt.grid()
plt.show()

print(data.columns)
